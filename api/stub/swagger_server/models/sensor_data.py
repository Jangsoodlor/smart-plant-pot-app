# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SensorData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, read_time: str=None, light: float=None, temperature: float=None, soil_moisture: float=None):  # noqa: E501
        """SensorData - a model defined in Swagger

        :param read_time: The read_time of this SensorData.  # noqa: E501
        :type read_time: str
        :param light: The light of this SensorData.  # noqa: E501
        :type light: float
        :param temperature: The temperature of this SensorData.  # noqa: E501
        :type temperature: float
        :param soil_moisture: The soil_moisture of this SensorData.  # noqa: E501
        :type soil_moisture: float
        """
        self.swagger_types = {
            'read_time': str,
            'light': float,
            'temperature': float,
            'soil_moisture': float
        }

        self.attribute_map = {
            'read_time': 'readTime',
            'light': 'light',
            'temperature': 'temperature',
            'soil_moisture': 'soilMoisture'
        }
        self._read_time = read_time
        self._light = light
        self._temperature = temperature
        self._soil_moisture = soil_moisture

    @classmethod
    def from_dict(cls, dikt) -> 'SensorData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensorData of this SensorData.  # noqa: E501
        :rtype: SensorData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read_time(self) -> str:
        """Gets the read_time of this SensorData.


        :return: The read_time of this SensorData.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time: str):
        """Sets the read_time of this SensorData.


        :param read_time: The read_time of this SensorData.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def light(self) -> float:
        """Gets the light of this SensorData.


        :return: The light of this SensorData.
        :rtype: float
        """
        return self._light

    @light.setter
    def light(self, light: float):
        """Sets the light of this SensorData.


        :param light: The light of this SensorData.
        :type light: float
        """

        self._light = light

    @property
    def temperature(self) -> float:
        """Gets the temperature of this SensorData.


        :return: The temperature of this SensorData.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this SensorData.


        :param temperature: The temperature of this SensorData.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def soil_moisture(self) -> float:
        """Gets the soil_moisture of this SensorData.


        :return: The soil_moisture of this SensorData.
        :rtype: float
        """
        return self._soil_moisture

    @soil_moisture.setter
    def soil_moisture(self, soil_moisture: float):
        """Sets the soil_moisture of this SensorData.


        :param soil_moisture: The soil_moisture of this SensorData.
        :type soil_moisture: float
        """

        self._soil_moisture = soil_moisture
