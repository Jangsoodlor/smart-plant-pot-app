# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WeatherData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, read_time: str=None, humidity: float=None, precipitation: float=None, temperature: float=None, cloud_cover: float=None):  # noqa: E501
        """WeatherData - a model defined in Swagger

        :param read_time: The read_time of this WeatherData.  # noqa: E501
        :type read_time: str
        :param humidity: The humidity of this WeatherData.  # noqa: E501
        :type humidity: float
        :param precipitation: The precipitation of this WeatherData.  # noqa: E501
        :type precipitation: float
        :param temperature: The temperature of this WeatherData.  # noqa: E501
        :type temperature: float
        :param cloud_cover: The cloud_cover of this WeatherData.  # noqa: E501
        :type cloud_cover: float
        """
        self.swagger_types = {
            'read_time': str,
            'humidity': float,
            'precipitation': float,
            'temperature': float,
            'cloud_cover': float
        }

        self.attribute_map = {
            'read_time': 'readTime',
            'humidity': 'humidity',
            'precipitation': 'precipitation',
            'temperature': 'temperature',
            'cloud_cover': 'cloudCover'
        }
        self._read_time = read_time
        self._humidity = humidity
        self._precipitation = precipitation
        self._temperature = temperature
        self._cloud_cover = cloud_cover

    @classmethod
    def from_dict(cls, dikt) -> 'WeatherData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WeatherData of this WeatherData.  # noqa: E501
        :rtype: WeatherData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read_time(self) -> str:
        """Gets the read_time of this WeatherData.


        :return: The read_time of this WeatherData.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time: str):
        """Sets the read_time of this WeatherData.


        :param read_time: The read_time of this WeatherData.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def humidity(self) -> float:
        """Gets the humidity of this WeatherData.


        :return: The humidity of this WeatherData.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: float):
        """Sets the humidity of this WeatherData.


        :param humidity: The humidity of this WeatherData.
        :type humidity: float
        """

        self._humidity = humidity

    @property
    def precipitation(self) -> float:
        """Gets the precipitation of this WeatherData.


        :return: The precipitation of this WeatherData.
        :rtype: float
        """
        return self._precipitation

    @precipitation.setter
    def precipitation(self, precipitation: float):
        """Sets the precipitation of this WeatherData.


        :param precipitation: The precipitation of this WeatherData.
        :type precipitation: float
        """

        self._precipitation = precipitation

    @property
    def temperature(self) -> float:
        """Gets the temperature of this WeatherData.


        :return: The temperature of this WeatherData.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this WeatherData.


        :param temperature: The temperature of this WeatherData.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def cloud_cover(self) -> float:
        """Gets the cloud_cover of this WeatherData.


        :return: The cloud_cover of this WeatherData.
        :rtype: float
        """
        return self._cloud_cover

    @cloud_cover.setter
    def cloud_cover(self, cloud_cover: float):
        """Sets the cloud_cover of this WeatherData.


        :param cloud_cover: The cloud_cover of this WeatherData.
        :type cloud_cover: float
        """

        self._cloud_cover = cloud_cover
